#include<stdio.h>
#include<malloc.h>

typedef struct{
  int id;
  char name[10];
  double height;
}person;
typedef person element;

typedef struct TreeNode {
  element data;
  struct TreeNode *left, *right;
} TreeNode;

TreeNode *search(TreeNode *node, int key);
void insert_node(TreeNode *root,element person);
void inorde(TreeNode*root);
//TreeNode *delete_node(TreeNode *root, int key);

  

int main(int argc, char *argv[]){

  TreeNode *root=(TreeNode*)malloc(sizeof(TreeNode));
  
  FILE *fp;
  fp=fopen(argv[1],"r");
  for(;;){
    person tmp={0,"\0",0};
    fscanf(fp,"%d",&tmp.id);
    if(tmp.id==0) break;
    fscanf(fp,"%s",tmp.name);
    fscanf(fp,"%lf",&tmp.height);

    insert_node(root, tmp);
  }
  
  
  
  
}

TreeNode *search(TreeNode *node, int key){
  while(node!=NULL){
    if(node->data.id>key) node=node->right;
    else if(node->data.id<key) node=node->left;
    else return node;
  }
  return NULL;
}

void insert_node(TreeNode *root, element person){
  TreeNode *p;
  p=(TreeNode*)malloc(sizeof(TreeNode));
  p->data=person;
  p->left=p->right=NULL;
  
  while(root->data.id!=person.id||root!=NULL){
    if(root->data.id>person.id) root=root->right;
    else root=root->left;
  }
  root=p;
}
  
void inorder(TreeNode *root){ //NVR
  if(root){
    inorder(root->left);
    printf("%s",root->data.name);
    inorder(root->right);
  }
}
